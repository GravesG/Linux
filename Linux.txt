创建虚拟机要注意选择网络连接
有三种选择
1，桥连接：linux可以和其他的系统通信，但是 可能造成ip冲突。
2，NAT：网络地址转换方式：linux可以访问外网，不会造成ip冲突。
3，主机模式：你的linux是一台独立的主机，不能访问外网




Linux 的目录结构
	linux 的文件系统是采用级层式的树状目录结构，在此结构中的最上层是根目录“/”，然后在此目录下再创建其他的目录。
	深刻理解 linux 树状文件目录是非常重要的，这里我给大家说明一下。

	记住一句经典的话：在 Linux 世界里，一切皆文件。
1)	linux 的目录中有且只要一个根目录 /
2)	linux 的各个目录存放的内容是规划好，不用乱放文件。
3)	linux 是以文件的形式管理我们的设备，因此 linux 系统，一切皆为文件。
4)	linux 的各个文件目录下存放什么内容，大家必须有一个认识。
5)	学习后，你脑海中应该有一颗 linux 目录树


--vi 和 vim编辑器
	vi 和 vim 的基本介绍
所有的 Linux 系统都会内建 vi 文本编辑器。

Vim 具有程序编辑的能力，可以看做是 Vi 的增强版本，可以主动的以字体颜色辨别语法的正确性，方便程序设计。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。

	vi 和 vim 的三种常见模式
	正常模式
在正常模式下，我们可以使用快捷键。
以 vim 打开一个档案就直接进入一般模式了(这是默认的模式)。在这个模式中， 你可以使用『上下左右』按键来移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容， 也可以使用
『复制、贴上』来处理你的文件数据。

	插入模式/编辑模式
在模式下，程序员可以输入内容。
按下 i, I, o, O, a, A, r, R 等任何一个字母之后才会进入编辑模式,  一般来说按 i 即可
	命令行模式
在这个模式当中， 可以提供你相关指令，完成读取、存盘、替换、离开 vim 、显示行号等的动作则是在此模式中达成的！


	快捷键的使用案例
1)	拷贝当前行	yy ,  拷贝当前行向下的 5 行	5yy，并粘贴（p）。
2)	删除当前行	dd	, 删除当前行向下的 5 行 5dd
3)	在文件中查找某个单词  [命令行下  /关键字  ， 回车  查找  ,	输入 n 就是查找下一个 ],查询
hello.
4)	设置文件的行号，取消文件的行号.[命令行下	: set nu  和	:set nonu]
5)	编辑 /etc/profile 文件，使用快捷键到底文档的最末行[G]和最首行[gg],注意这些都是在正常模式下执行的。
6)	在一个文件中输入  "hello" ,然后又撤销这个动作，再正常模式下输入	u
7)	编辑	/etc/profile 文件，并将光标移动到	第 20 行	shift+g
第一步：显示行号 :set nu 第二步：输入 20 这个数第三步:	输入 shift+g



--开机、重启和用户登录注销
关机&重启命令
基本介绍
shutdown
shutdown -h now : 表示立即关机shutdown -h 1 : 表示 1 分钟后关机shutdown -r now:  立即重启
halt

注意细节
当我们关机或者重启时，都应该先执行以下 sync 指令，把内存的数据写入磁盘，防止数据丢失。

用户登录和注销
基本介绍
1)	登录时尽量少用 root 帐号登录，因为它是系统管理员，最大的权限，避免操作失误。可以利用普通用户登录，登录后再用”su -  用户名’命令来切换成系统管理员身份.
2)	在提示符下输入 logout 即可注销用户
使用细节
1)	logout 注销指令在图形运行级别无效，在 运行级别 3 下有效.
2)运行级别这个概念，后面给大家介绍




--用户管理
添加用户
基本语法
useradd	[选项]	用户名
特别说明：
cd	表示 change directory, 切换目录.

细节说明
给用户指定或者修改密码
基本语法
passwd	用户名应用案例

删除用户
基本语法
userdel	用户名
思考题
在删除用户时，我们一般不会将家目录删除。

查询用户信息
基本语法
id	用户名
 
应用实例
案例 1：请查询 root	信息
细节说明
1)	当用户不存在时，返回”无此用户”
切换用户
介绍
在操作 Linux 中，如果当前用户的权限不够，可以通过 su - 指令，切换到高权限用户，比如 root
基本语法
su	–	切换用户名


细节说明
1)从权限高的用户切换到权限低的用户，不需要输入密码，反之需要。
2)当需要返回到原来用户时，使用 exit 指令

用户组
介绍
类似于角色，系统可以对有共性的多个用户进行统一的管理。
增加组

删除组
指令(基本语法)
groupdel 组 名

增加用户时直接加上组
指令(基本语法)
useradd	-g 用户组 用户名


指令(基本语法)
usermod	-g 用户组 用户名
创建一个 shaolin 组，让将 zwj  用户修改到 shaolin
 
/etc/passwd 文件
用户（user）的配置文件，记录用户的各种信息
每行的含义：用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录 Shell
/etc/shadow 文件
口令的配置文件
每行的含义：登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志
/etc/group 文件
组(group)的配置文件，记录 Linux 包含的组的信息每行含义：组名:口令:组标识号:组内用户列表








--实用指令
指定运行级别
运行级别说明：
0	：关机
1	：单用户【找回丢失密码】
2：多用户状态没有网络服务
3：多用户状态有网络服务
4：系统未使用保留给用户
5: 图形界面
6：系统重启





切换到指定运行级别的指令
基本语法
init [012356]
init	5
init	0

面试题
如何找回 root 密码，如果我们不小心，忘记 root  密码，怎么找回。
思路： 进入到 单用户模式，然后修改 root 密码。因为进入单用户模式，root 不需要密码就可以登录。
演示一把（注意观察）：
 
总结
开机->在引导时输入 回车键-> 看到一个界面输入 e ->  看到一个新的界面，选中第二行（编辑内核）在输入  e->  在这行最后输入	1 ,再输入 回车键->再次输入 b ,这时就会进入到单用户模式。
这时，我们就进入到单用户模式，使用 passwd  指令来修改 root  密码。

课堂练习:
1)	假设我们的 root 密码忘记了，请问如何找回密码
2)	请设置我们的 运行级别，linux 运行后，直接进入到 命令行界面，即进入到 3 运行级别
vim /etc/inittab
将	id:5:initdefault:这一行中的数字, 5 这个数字改成对应的运行级别即可。

帮助指令
介绍
当我们对某个指令不熟悉时，我们可以使用 Linux 提供的帮助指令来了解这个指令的使用方法。
man 获得帮助信息
	基本语法
man [命令或配置文件]（功能描述：获得帮助信息）
	应用实例
案例：查看 ls 命令的帮助信息
 

help 指令
	基本语法
 
help 命令 （功能描述：获得 shell 内置命令的帮助信息）
	应用实例
案例：查看 cd 命令的帮助信息

当一个指令不熟悉如何学习的建议
百度帮助更直接
虽然上面两个都可以来获取指令帮助，但是需要英语功底，如果英语不太好的，我还是推荐大家直接百度靠谱。 ifconfig
 

文件目录类
pwd 指令
•	基本语法
pwd	(功能描述：显示当前工作目录的绝对路径)

cd 指令
•	基本语法
cd	[参数] (功能描述：切换到指定目录)
•	常用参数
cd ~ 或者 cd ：回到自己的家目录
cd .. 回到当前目录的上一级目录
•	应用实例
案例 1：使用绝对路径切换到 root 目录
cd	/root
案例 2:	使用相对路径到/root 目录
这里我们需要知道该用户目录在哪个目录下，才能写出这个指令，假设在/usr/lib
cd	../../root
案例 3：表示回到当前目录的上一级目录cd ..
案例 4：回到家目录cd
cd	~

rmdir 指令
	介绍
rmdir 指令删除空目录
	基本语法
	使用细节
rmdir 删除的是空目录，如果目录下有内容时无法删除的。
提示：如果需要删除非空目录，需要使用	rm -rf 要删除的目录


touch 指令
touch 指令创建空文件
•	基本语法
touch 文件名称
•	应用实例
案例 1: 创建一个空文件 hello.txt

cp 指令[重要]
cp 指令拷贝文件到指定目录
•	基本语法
cp [选项] source dest
•	常用选项
-r ：递归复制整个文件夹
•	应用实例
案例 1: 将  /home/aaa.txt 拷贝到	/home/bbb 目录下[拷贝单个文件]

案例 2: 递归复制整个文件夹，举例将/home/test 整个目录拷贝到 /home/zwj 目录

技术小技巧：
可以通过 上下箭头的键，调出原来使用过的指令。

rm 指令
rm 指令移除【删除】文件或目录

•	基本语法
rm	[选项]	要删除的文件或目录
•	常用选项
-r ：递归删除整个文件夹
-f ： 强制删除不提示

•	使用细节
强制删除不提示的方法：带上 -f 参数即可


mv 指令
mv 移动文件与目录或重命名
•	基本语法
mv	oldNameFile newNameFile	(功能描述：重命名) mv /temp/movefile /targetFolder (功能描述：移动文件)
•	应用实例
案例 1: 将 /home/aaa.txt  文件 重新命名为 pig.txt

cat 指令
cat 查看文件内容，是以只读的方式打开。
•	基本语法
cat	[选项] 要查看的文件
•	常用选项
-n ：显示行号
 
•	应用实例
案例 1:	/etc/profile	文件内容，并显示行号

•	使用细节
cat 只能浏览文件，而不能修改文件，为了浏览方便，一般会带上	管道命令 | more
cat 文件名 | more [分页浏览]
more 指令
more 指令是一个基于 VI 编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more 指令中内置了若干快捷键，详见操作说明
•	基本语法
more 要查看的文件
•	操作说明
•	应用实例
案例: 采用 more 查看文件
/etc/profile

快捷键一栏
 

less 指令
less 指令用来分屏查看文件内容，它的功能与 more 指令类似，但是比 more 指令更加强大，支持各种显示终端。less 指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。
•	基本语法
less 要查看的文件
•	操作说明
•	应用实例

快捷键


---  > 指令 和 >>  指令
介绍
说明：ls -l > a.txt , 将 ls -l 的显示的内容覆盖写入到 a.txt 文件，如果该文件不存在，就创建该文件。
 
2)	ls -al >>文件	（功能描述：列表的内容追加到文件 aa.txt 的末尾）

3)	cat 文件 1 > 文件 2 （功能描述：将文件 1 的内容覆盖到文件 2）
 
案例 2: 将当前日历信息  追加到	/home/mycal 文件中 [提示 cal ]


-- echo 指令

echo 输出内容到控制台。
•	基本语法
echo	[选项]	[输出内容]
•	应用实例
案例: 使用 echo 指令输出环境变量,输出当前的环境路径。
echo $PATH


-- head 指令
head 用于显示文件的开头部分内容，默认情况下 head 指令显示文件的前 10 行内容
•	基本语法
head  文件	(功能描述：查看文件头 10 行内容)
head -n 5 文件	(功能描述：查看文件头 5 行内容，5 可以是任意行数)
•	应用实例
案例: 查看/etc/profile 的前面 5 行代码
 

 


-- tail 指令

tail 用于输出文件中尾部的内容，默认情况下 tail 指令显示文件的后 10 行内容。
•	基本语法

案例 2: 实时监控 mydate.txt ,  看看到文件有变化时，是否看到， 实时的追加日期
 
-- ln 指令

案例 2: 删除软连接 linkToRoot

•	细节说明
当我们使用 pwd 指令查看目录时，仍然看到的是软链接所在目录。

-- 	history 指令

查看已经执行过历史命令,也可以执行历史指令
•	基本语法
history	（功能描述：查看已经执行过历史命令）


--	时间日期类
date 指令-显示当前日期
•	基本语法
1) date	（功能描述：显示当前时间）
案例 2: 显示当前时间年月日
 
案例 3: 显示当前时间年月日时分秒
 

date 指令-设置日期

•	基本语法
date	-s	字符串时间

•	应用实例

cal 指令

查看日历指令
•	基本语法
cal [选项]	（功能描述：不加选项，显示本月日历）
•	应用实例
案例 1: 显示当前日历

案例 2: 显示 2020 年日历


--	搜索查找类
--	find 指令
find 指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。
•	基本语法
find	[搜索范围]	[选项]
•	选项说明
•	应用实例
案例 1: 按文件名：根据名称查找/home 目录下的 hello.txt 文件
 

案例 2：按拥有者：查找/opt 目录下，用户名称为 nobody 的文件
案例 3：查找整个 linux 系统下大于 20m 的文件（+n  大于	-n 小于	n 等于）

1m = 1024k

查询	/ 目录下，所有 .txt 的文件
 


--	locate 指令

locaate 指令可以快速定位文件路径。locate 指令利用事先建立的系统中所有文件名称及路径的
locate 数据库实现快速定位给定的文件。Locate 指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新 locate 时刻。
•	基本语法
locate 搜索文件
•	特别说明
由于 locate 指令基于数据库进行查询，所以第一次运行前，必须使用 updatedb 指令创建 locate 数据库。
•	应用实例
案例 1: 请使用 locate 指令快速定位 hello.txt 文件所在目录
 


--	grep 指令和 管道符号 |

grep 过滤查找 ， 管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理。
•	基本语法
grep [选项] 查找内容 源文件
•	常用选项



--	压缩和解压类
--	gzip/gunzip 指令

gzip 用于压缩文件， gunzip  用于解压的
•	基本语法
 
gzip 文件	（功能描述：压缩文件，只能将文件压缩为*.gz 文件）
gunzip 文 件.gz	（功能描述：解压缩文件命令）

•	应用实例
案例 1: gzip 压缩， 将 /home 下的 hello.txt 文件进行压缩

细节说明
当我们使用 gzip  对文件进行压缩后，不会保留原来的文件。
--	zip/unzip 指令
zip 用于压缩文件， unzip 用于解压的，这个在项目打包发布中很有用的
•	基本语法
zip	[选项] XXX.zip	将要压缩的内容（功能描述：压缩文件和目录的命令）
unzip	[选项] XXX.zip （功能描述：解压缩文件）
•	zip 常用选项
-r：递归压缩，即压缩目录
 
•	unzip 的常用选项
-d<目录> ：指定解压后文件的存放目录
•	应用实例
案例 1:	将 /home 下的 所有文件进行压缩成 mypackage.zip

 


--	tar 指令
tar 指令 是打包指令，最后打包后的文件是 .tar.gz 的文件。
•	基本语法
tar	[选项]	XXX.tar.gz	打包的内容	(功能描述：打包目录，压缩后的文件格式.tar.gz)
•	选项说明
 

 
•	应用实例
案例 1:	压缩多个文件，将  /home/a1.txt 和  /home/a2.txt 压缩成	a.tar.gz

案例 3:	将  a.tar.gz	解压到当前目录
案 例 4: 将 myhome.tar.gz	解压到 /opt/ 目录下
 

指定解压到的那个目录，事先要存在才能成功，否则会报错。







组管理和权限管理
--	Linux 组基本介绍

在 linux 中的每个用户必须属于一个组，不能独立于组外。在 linux 中每个文件有所有者、所在组、其它组的概念。
1)	所有者
2)	所在组
3)	其它组
4)	改变用户所在的组










--	文件/目录 所有者
一般为文件的创建者,谁创建了该文件，就自然的成为该文件的所有者。
10.2.1	查看文件的所有者
1)	指令：ls	-ahl
2)	应用实例：创建一个组 police,再创建一个用户 tom,将 tom 放在 police 组 ,然后使用 tom 来创建一个文件 ok.txt，看看情况如何
 

 


--	修改文件所有者
•	指令：chown 用户名 文件名
•	应用案例
要求：使用 root  创建一个文件 apple.txt ，然后将其所有者修改成 tom
 

 

--	组的创建
--	基本指令

--	文件/目录 所在组

当某个用户创建了一个文件后，默认这个文件的所在组就是该用户所在的组。
--	查看文件/目录所在组
•	基本指令
 
ls –ahl
•	应用实例
--	修改文件所在的组
•	基本指令
chgrp 组名 文件名
•	应用实例
使用 root 用户创建文件 orange.txt ,看看当前这个文件属于哪个组，然后将这个文件所在组，修改到 police 组 。

--	其它组
除文件的所有者和所在组的用户外，系统的其它用户都是文件的其它组.
--	改变用户所在组
 
在添加用户时，可以指定将该用户添加到哪个组中，同样的用 root 的管理权限可以改变某个用户所在的组。
--	改变用户所在组
1)	usermod	–g	组名	用户名
2)	usermod	–d	目录名	用户名	改变该用户登陆的初始目录。
--	应用实例
创建一个土匪组（bandit）将 tom  这个用户从原来所在的 police 组，修改到 bandit(土匪) 组




--	权限的基本介绍
ls	-l 中显示的内容如下：
-rwxrw-r-- 1 root root 1213 Feb 2 09:39 abc
0-9 位说明
1)第 0 位确定文件类型(d, - , l , c , b)
2)第 1-3 位确定所有者（该文件的所有者）拥有该文件的权限。---User
3)第 4-6 位确定所属组（同用户组的）拥有该文件的权限，---Group
4)第 7-9 位确定其他用户拥有该文件的权限 ---Other






--	rwx 权限详解
--	rwx 作用到文件
1)	[ r ]代表可读(read):  可以读取,查看
2)	[ w ]代表可写(write): 可以修改,但是不代表可以删除该文件,删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件.
3)	[ x ]代表可执行(execute):可以被执行
--	rwx 作用到目录
1)	[ r ]代表可读(read):  可以读取，ls 查看目录内容
2)	[ w ]代表可写(write):  可以修改,目录内创建+删除+重命名目录
3)	[ x ]代表可执行(execute):可以进入该目录
--	文件及目录权限实际案例
ls	-l 中显示的内容如下：(记住)
-rwxrw-r-- 1 root root 1213 Feb 2 09:39 abc
 
10 个字符确定不同用户能对文件干什么
第一个字符代表文件类型： 文件 (-),目录(d),链接(l)
其余字符每 3 个一组(rwx) 读(r) 写(w) 执行(x) 第一组 rwx : 文件拥有者的权限是读、写和执行
第二组 rw- :  与文件拥有者同一组的用户的权限是读、写但不能执行第三组 r-- :	不与文件拥有者同组的其他用户的权限是读不能写和执行可用数字表示为: r=4,w=2,x=1  因此 rwx=4+2+1=7
1	文件：硬连接数或	目录：子目录数
root	用户
root	组
1213	文件大小(字节)，如果是文件夹，显示 4096 字节
Feb 2 09:39	最后修改日期
abc	文件名

--	修改权限-chmod
--	基本说明：
通过 chmod 指令，可以修改文件或者目录的权限

--	第一种方式：+ 、-、=  变更权限
u:所有者	g:所有组	o:其他人	a:所有人(u、g、o 的总和)
1)	chmod	u=rwx,g=rx,o=x	文件目录名
2)	chmod	o+w	文件目录名
3)	chmod	a-x	文件目录名
•	案例演示
1)	给 abc 文件 的所有者读写执行的权限，给所在组读执行权限，给其它组读执行权限。


2)	给 abc 文件的所有者除去执行的权限，增加组写的权限

--	第二种方式：通过数字变更权限

规则：r=4 w=2 x=1		,rwx=4+2+1=7 chmod u=rwx,g=rx,o=x			文件目录名相当于  chmod	751		文件目录名
•	案例演示
 
要求：将  /home/abc.txt 文件的权限修改成	rwxr-xr-x, 使用给数字的方式实现：
rwx = 4+2+1 = 7
r-x = 4+1=5
r-x = 4+1 =5
指令：chmod 755 /home/abc.txt

--	修改文件所有者-chown
--	基本介绍
chown	newowner	file	改变文件的所有者
chown newowner:newgroup	file	改变用户的所有者和所有组
-R	如果是目录 则使其下所有子文件或目录递归生效
--	案例演示：
1)	请将 /home/abc .txt 文件的所有者修改成 tom

2)	请将 /home/kkk 目录下所有的文件和目录的所有者都修改成 tom
首选我们应该使用 root 操作。
 
--	修改文件所在组-chgrp
--	基本介绍
chgrp newgroup file	改变文件的所有组
--	案例演示：
1)	请将 /home/abc .txt 文件的所在组修改成 bandit (土匪) chgrp bandit /home/abc.txt
2)	请将 /home/kkk 目录下所有的文件和目录的所在组都修改成 bandit(土匪) chgrp -R bandit /home/kkk



实操篇 crond 任务调度
--	原理示意图
 
crontab 进行 定时任务的设置，。
--	概述
任务调度：是指系统在某个时间执行的特定的命令或程序。
任务调度分类：1.系统工作：有些重要的工作必须周而复始地执行。如病毒扫描等
 
2.个别用户工作：个别用户可能希望执行某些程序，比如对 mysql 数据库的备份。
--	基本语法
crontab [选项]
--	常用选项
--	快速入门
--	任务的要求
设置任务调度文件：/etc/crontab
设置个人任务调度。执行 crontab –e 命令。接着输入任务到调度文件
如：*/1 * * * * ls –l	/etc/ > /tmp/to.txt
意思说每小时的每分钟执行 ls –l /etc/ > /tmp/to.txt 命令
--	步骤如下
1)	cron -e
2)	*/ 1 * * * * ls -l /etc >> /tmp/to.txt
3)	当保存退出后就程序。
4)	在每一分钟都会自动的调用 ls -l /etc >> /tmp/to.txt
--	参数细节说明
--	任务调度的几个应用实例
 

--	案例 1：每隔 1 分钟，就将当前的日期信息，追加到 /tmp/mydate  文件
中
1)	先编写一个文件	/home/mytask1.sh date >> /tmp/mydate
2)	给 mytask1.sh  一个可以执行权限
chmod 744 /home/mytask1.sh
3)	crontab -e
4)	*/1 * * * *	/home/mytask1.sh
5)	成功
--	案例 2：每隔 1 分钟， 将当前日期和日历都追加到 /home/mycal  文件中
1)	先编写一个文件	/home/mytask2.sh
date >> /tmp/mycal cal >> /tmp/mycal
2)	给 mytask1.sh 一个可以执行权限
chmod 744 /home/mytask2.sh
3)	crontab -e
4)	*/1 * * * *	/home/mytask2.sh
5)	成功
--	案例 3:	每天凌晨 2:00  将 mysql 数据库 testdb  ，备份到文件中
mydb.bak。
1)	先编写一个文件	/home/mytask3.sh
/usr/local/mysql/bin/mysqldump -u root -proot testdb > /tmp/mydb.bak
2)	给 mytask3.sh 一个可以执行权限
 
chmod 744 /home/mytask3.sh
3)	crontab -e
4)	0 2 * * *	/home/mytask3.sh
5)	成功
--	crond 相关指令:
1)	conrtab –r：终止任务调度。
2)	crontab –l：列出当前有那些任务调度
3)	service crond restart	[重启任务调度]




 Linux 磁盘分区、挂载
--	分区基础知识

--	分区的方式：
1)	mbr 分区:
1.最多支持四个主分区
2.系统只能安装在主分区
3.扩展分区要占一个主分区
4.MBR 最大只支持 2TB，但拥有最好的兼容性


--	windows 下的磁盘分区
 
--	Linux 分区
--	原理介绍
1)	Linux 来说无论有几个分区，分给哪一目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构 , Linux 中每个分区都是用来组成整个文件系统的一部分。
2)	Linux 采用了一种叫“载入”的处理方法，它的整个文件系统中包含了一整套的文件和目录， 且将一个分区和一个目录联系起来。这时要载入的一个分区将使它的存储空间在一个目录下获得。
3)示意图
 

--	硬盘说明
1)	Linux 硬盘分 IDE 硬盘和 SCSI 硬盘，目前基本上是 SCSI 硬盘
2)对于 IDE 硬盘，驱动器标识符为“hdx~”,其中“hd”表明分区所在设备的类型，这里是指 IDE 硬盘了。“x”为盘号（a 为基本盘，b 为基本从属盘，c 为辅助主盘，d 为辅助从属盘）,“~”代表分区，前四个分区用数字 1 到 4 表示，它们是主分区或扩展分区，从 5 开始就是逻辑分区。例，hda3 表示为第一个 IDE 硬盘上的第三个主分区或扩展分区,hdb2 表示为第二个 IDE 硬盘上的第二个主分区或扩展分区。
3)对于 SCSI 硬盘则标识为“sdx~”，SCSI 硬盘是用“sd”来表示分区所在设备的类型的，其余则和 IDE 硬盘的表示方法一样。
 


--	挂载的经典案例
需求是给我们的 Linux 系统增加一个新的硬盘，并且挂载到/home/newdisk
12.3.1	如何增加一块硬盘
1)虚拟机添加硬盘
2)分区	fdisk                 /dev/sdb 3)格式化	mkfs	-t ext4	/dev/sdb1
4)挂载	先创建一个  /home/newdisk	, 挂 载  mount	/dev/sdb1	/home/newdisk
5)设置可以自动挂载(永久挂载，当你重启系统，仍然可以挂载到 /home/newdisk) 。
vim	/etc/fstab
/dev/sdb1	/home/newdisk	ext4	defaults	0 0
 

--	具体的操作步骤整理
--	虚拟机增加硬盘步骤 1
在【虚拟机】菜单中，选择【设置】，然后设备列表里添加硬盘，然后一路【下一步】，中间只有选择磁盘大小的地方需要修改，至到完成。然后重启系统（才能识别）！
 
--	虚拟机增加硬盘步骤 2
分区命令	fdisk	/dev/sdb
开始对/sdb 分区
•	m	显示命令列表
•	p	显示磁盘分区 同 fdisk	–l
•	n	新增分区
•	d	删除分区
•	w	写入并退出
说明： 开始分区后输入 n，新增分区，然后选择 p ，分区类型为主分区。两次回车默认剩余全
 
部空间。最后输入 w 写入分区并退出，若不保存退出输入 q。
 
--	虚拟机增加硬盘步骤 3
格式化磁盘
分区命令:mkfs -t	ext4	/dev/sdb1
其中 ext4 是分区类型
12.4.4	虚拟机增加硬盘步骤 4
挂载: 将一个分区与一个目录联系起来，
•	mount	设备名称	挂载目录
•	例如：  mount	/dev/sdb1	/newdisk
•	umount	设备名称  或者	挂载目录
•	例如：	umount	/dev/sdb1 或 者  umount	/newdisk
--	虚拟机增加硬盘步骤 5
永久挂载:  通过修改/etc/fstab 实现挂载添加完成后  执行 mount	–a 即刻生效
 

--	磁盘情况查询
--	查询系统整体磁盘使用情况
基本语法
df -h
应用实例
查询系统整体磁盘使用情况

--	查询指定目录的磁盘占用情况
•	基本语法
du -h	/目录
查询指定目录的磁盘占用情况，默认为当前目录
-s 指定目录占用大小汇总
-h 带计量单位
-a 含文件
--max-depth=1	子目录深度
 
-c 列出明细的同时，增加汇总值
•	应用实例
查询  /opt 目录的磁盘占用情况，深度为 1

--	磁盘情况-工作实用指令
1)	统计/home 文件夹下文件的个

2)	统计/home 文件夹下目录的个数
 
3)	统计/home 文件夹下文件的个数，包括子文件夹里的
4)	统计文件夹下目录的个数，包括子文件夹里的
 
 
5)	以树状显示目录结构

 

 
 
 
 
 
 
 网络配置
--	Linux 网络配置原理图(含虚拟机)
目前我们的网络配置采用的是 NAT。

--	查看网络 IP 和网关
--	查看虚拟网络编辑器
--	修改 ip 地址(修改虚拟网络的 ip)
 

--	查看 windows 环境的中 VMnet8 网络配置 (ipconfig 指令)
1)	使用 ipconfig 查看
2)	界面查看
 


--	ping 测试主机之间网络连通
--	基本语法
ping 目的主机 （功能描述：测试当前服务器是否可以连接目的主机）
--	应用实例
测试当前服务器是否可以连接百度
[root@hadoop100 桌面]# ping www.baidu.com

--	linux 网络环境配置
--	第一种方法(自动获取)
 

 
缺点: linux 启动后会自动获取 IP,缺点是每次自动获取的 ip 地址可能不一样。这个不适用于做服务器，因为我们的服务器的 ip 需要时固定的。
--	第二种方法(指定固定的 ip)
说明
直 接 修 改 配 置 文 件 来 指 定  IP, 并 可 以 连 接 到 外 网 ( 程 序 员 推 荐 ) ， 编 辑	vi
/etc/sysconfig/network-scripts/ifcfg-eth0
要求：将 ip 地址配置的静态的，ip 地址为 192.168.184.130
 
 
修改后，一定要 重启服务
1)	service network restart
2)	reboot 重启系统






 进程管理
--	进程的基本介绍

1)在 LINUX 中，每个执行的程序（代码）都称为一个进程。每一个进程都分配一个 ID 号。
2)每一个进程，都会对应一个父进程，而这个父进程可以复制多个子进程。例如 www 服务器。
3)每个进程都可能以两种方式存在的。前台与后台，所谓前台进程就是用户目前的屏幕上可以进行操作的。后台进程则是实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行。
4)一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中。直到关机才才结束。

--	显示系统执行的进程
--	说明：
查看进行使用的指令是	ps ,一般来说使用的参数是 ps -aux
 

--	ps 指令详解
1)指令：ps –aux|grep xxx ，比如我看看有没有 sshd 服务


•	VSZ：进程占用的虚拟内存大小（单位：KB）
•	RSS：进程占用的物理内存大小（单位：KB）
•	TT：终端名称,缩写 .
•	STAT：进程状态，其中 S-睡眠，s-表示该进程是会话的先导进程，N-表示进程拥有比普通优先级更低的优先级，R-正在运行，D-短期等待，Z-僵死进程，T-被跟踪或者被停止等等
•	STARTED：进程的启动时间
•	TIME：CPU 时间，即进程使用 CPU 的总时间
•	COMMAND：启动进程所用的命令和参数，如果过长会被截断显示
 

--	应用实例
要求：以全格式显示当前所有的进程，查看进程的父进程。

•	UID：用户 ID
•	PID：进程 ID
•	PPID：父进程 ID
•	C：CPU 用于计算执行优先级的因子。数值越大，表明进程是 CPU 密集型运算，执行优先级会降低；数值越小，表明进程是 I/O 密集型运算，执行优先级会提高
•	STIME：进程启动的时间
•	TTY：完整的终端名称
•	TIME：CPU 时间
•	CMD：启动进程所用的命令和参数
思考题，如果我们希望查看 sshd 进程的父进程号是多少，应该怎样查询 ？
 

 
--	终止进程 kill 和 killall
--	介绍:

若是某个进程执行一半需要停止时，或是已消了很大的系统资源时，此时可以考虑停止该进程。使用 kill 命令来完成此项任务。

--	基本语法：
kill	[选项] 进程号（功能描述：通过进程号杀死进程）
killall 进程名称（功能描述：通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用）
--	常用选项：
-9 :表示强迫进程立即停止
--	最佳实践：
案例 1：踢掉某个非法登录用户
 
案例 2: 终止远程登录服务 sshd, 在适当时候再次重启 sshd 服务

案例 3: 终止多个 gedit  编辑器 【killall ,  通过进程名称来终止进程】

案例 4：强制杀掉一个终端
 

--	查看进程树 pstree
--	基本语法：

 
案例 2：请你树状的形式进程的用户 id pstree -u 即可。

--	服务(Service)管理
 

--	介绍:
服务(service) 本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其它程序的请求，比如(mysql , sshd 防火墙等)，因此我们又称为守护进程，是 Linux 中非常重要的知识点。【原理图】

在 CentOS7.0 后 不再使用 service ,而是 systemctl
--	使用案例：
1)	查看当前防火墙的状况，关闭防火墙和重启防火墙。
 

2)这种方式只是临时生效，当重启系统后，还是回归以前对服务的设置。
如果希望设置某个服务自启动或关闭永久生效，要使用 chkconfig 指令，马上讲

--	查看服务名:
方式 1：使用 setup -> 系统服务 就可以看到。
 
方式 2:	/etc/init.d/服务名称

Linux 系统有 7 种运行级别(runlevel)：常用的是级别 3 和 5
•	运行级别 0：系统停机状态，系统默认运行级别不能设为 0，否则不能正常启动
•	运行级别 1：单用户工作状态，root 权限，用于系统维护，禁止远程登陆
•	运行级别 2：多用户状态(没有 NFS)，不支持网络
•	运行级别 3：完全的多用户状态(有 NFS)，登陆后进入控制台命令行模式
•	运行级别 4：系统未使用，保留
•	运行级别 5：X11 控制台，登陆后进入图形 GUI 模式
•	运行级别 6：系统正常关闭并重启，默认运行级别不能设为 6，否则不能正常启动
 

--	开机的流程说明

--	chkconfig 指令介绍
通过 chkconfig 命令可以给每个服务的各个运行级别设置自启动/关闭

2)	chkconfig	服务名	--list
3)	chkconfig	--level	5	服务名	on/off
 
请将 sshd 服务在运行级别为	5 的情况下，不要自启动。

--	应用实例：
1)	案例 1： 请显示当前系统所有服务的各个运行级别的运行状态
bash> chkconfig --list
2)	案例 2 ：请查看 sshd 服务的运行状态
bash> service sshd status

6) 案例 6： 在所有运行级别下，开启防火墙
bash> chkconfig	iptables	on
--	• 使用细节
1)	chkconfig 重新设置服务后自启动或关闭，需要重启机器 reboot 才能生效.
--	动态监控进程
--	介绍：

top 与 ps 命令很相似。它们都用来显示正在执行的进程。Top 与 ps 最大的不同之处，在于 top 在执行一段时间可以更新正在运行的的进程。
 

--	基本语法：
top [选项]

--	选项说明：

--	应用实例：
案例 1.监视特定用户
top：输入此命令，按回车键，查看执行的进程。
u：然后输入“u”回车，再输入用户名，即可
 

 

案例 2：终止指定的进程。
案例 3:指定系统状态更新的时间(每隔 10 秒自动更新， 默认是 3 秒)：
bash> top -d 10
 

--	查看系统网络情况 netstat(重要)
•	基本语法
netstat [选项]
netstat -anp
•	选项说明
-an	按一定顺序排列输出
-p	显示哪个进程在调用
•	应用案例


请查看服务名为 sshd 的服务的信息。





RPM	和 YUM
rpm 包的管理

--	介绍：
一种用于互联网下载包的打包及安装工具，它包含在某些 Linux 分发版中。它生成具有.RPM 扩展名的文件。RPM 是 RedHat Package Manager（RedHat 软件包管理工具）的缩写，类似 windows 的 setup.exe，这一文件格式名称虽然打上了 RedHat 的标志，但理念是通用的。
Linux 的分发版本都有采用（suse,redhat, centos  等等），可以算是公认的行业标准了。


--	rpm 包名基本格式：

一个 rpm 包名：firefox-45.0.1-1.el6.centos.x86_64.rpm 名称:firefox
版本号：45.0.1-1
 
适用操作系统: el6.centos.x86_64
表示 centos6.x 的 64 位系统
如果是 i686、i386 表示 32 位系统，noarch 表示通用。。


--	rpm 包的其它查询指令： rpm -qa :查询所安装的所有 rpm 软件包rpm -qa | more [分页显示]

rpm -q 软件包名 :查询软件包是否安装rpm -q firefox

rpm -qi  软件包名 ：查询软件包信息
 
rpm -qi file

rpm -qf 文件全路径名 查询文件所属的软件包
rpm -qf /etc/passwd rpm -qf /root/install.log
 
--	卸载 rpm 包：

•	基本语法
rpm -e RPM 包的名称
•	应用案例
1)	删除 firefox	软件包


•	细节问题
1)	如果其它软件包依赖于您要卸载的软件包，卸载时则会产生错误信息。如：	$ rpm -e	foo
removing these packages would break dependencies:foo is needed by bar-1.0-1
2)	如果我们就是要删除 foo 这个 rpm 包，可以增加参数 --nodeps ,就可以强制删除，但是一般不推荐这样做，因为依赖于该软件包的程序可能无法运行
如：$ rpm -e --nodeps foo
带上 --nodeps  就是强制删除。


--	安装 rpm 包：

•	基本语法
rpm -ivh	RPM 包全路径名称
 
•	参数说明
i=install 安 装
v=verbose 提 示
h=hash	进度条
•	应用实例
1) 演示安装 firefox 浏览器
步骤先找到 firefox 的安装 rpm 包,你需要挂载上我们安装 centos 的 iso 文件，然后到/media/下去找 rpm 找 。
cp firefox-45.0.1-1.el6.centos.x86_64.rpm /opt/



--	yum
--	介绍：
Yum 是一个 Shell 前端软件包管理器。基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。使用 yum 的前提是可以联网。


--	yum 的基本指令

--	yum 应用实例：
案例：请使用 yum 的方式来安装 firefox
1)	先查看一下  firefox	rpm 在 yum 服务器有没有
2)	安装
yum install firefox
 




